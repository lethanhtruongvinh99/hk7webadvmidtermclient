{"version":3,"sources":["Components/BoardItem/BoardItem.js","Components/BoardList/BoardList.js","App.js","reportWebVitals.js","index.js"],"names":["BoardItem","props","Card","style","width","Body","Title","boardName","Text","userId","Button","variant","BoardList","ListItem","map","item","boardId","App","useState","data","setData","setHasError","useEffect","a","fetch","res","json","then","catch","err","fetchData","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAeeA,MAZf,SAAmBC,GACjB,OACE,cAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,SAAtB,SACE,eAACF,EAAA,EAAKG,KAAN,WACE,cAACH,EAAA,EAAKI,MAAN,UAAaL,EAAMD,UAAUO,YAC7B,cAACL,EAAA,EAAKM,KAAN,UAAYP,EAAMD,UAAUS,SAC5B,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAhB,gCCGOC,MAVf,SAAmBX,GACjB,OACE,mCACGA,EAAMY,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8Bf,UAAWe,GAAzBA,EAAKC,eCsBdC,MAzBf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEmBF,oBAAS,GAF5B,mBAEIG,GAFJ,WAeb,OAZAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACoBC,MAAM,uDAD1B,cACQC,EADR,gBAEQA,EACHC,OACAC,MAAK,SAACF,GACLL,EAAQK,MAETG,OAAM,SAACC,GAAD,OAASR,EAAYQ,MAPhC,4CADc,uBAAC,WAAD,wBAUdC,KACC,IAED,gCACE,oBAAIC,UAAU,yBAAd,qBACA,qBAAKA,UAAU,gDAAf,SACE,cAAC,EAAD,CAAWlB,SAAUM,UCVda,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6480b783.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { Button } from \"react-bootstrap\";\r\nfunction BoardItem(props) {\r\n  return (\r\n    <Card style={{ width: \"18rem\" }}>\r\n      <Card.Body>\r\n        <Card.Title>{props.BoardItem.boardName}</Card.Title>\r\n        <Card.Text>{props.BoardItem.userId}</Card.Text>\r\n        <Button variant=\"primary\">Go somewhere</Button>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default BoardItem;\r\n","import React from \"react\";\r\nimport BoardItem from \"../BoardItem/BoardItem\";\r\nfunction BoardList(props) {\r\n  return (\r\n    <>\r\n      {props.ListItem.map((item) => (\r\n        <BoardItem key={item.boardId} BoardItem={item} />\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default BoardList;\r\n","import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport BoardList from \"./Components/BoardList/BoardList\";\nfunction App() {\n  const [data, setData] = useState([]);\n  const [hasError, setHasError] = useState(false);\n  useEffect(() => {\n    async function fetchData() {\n      const res = await fetch(\"https://hk7webadvmidtermserver.herokuapp.com/boards\");\n      await res\n        .json()\n        .then((res) => {\n          setData(res);\n        })\n        .catch((err) => setHasError(err));\n    }\n    fetchData();\n  }, []);\n  return (\n    <div>\n      <h1 className=\"bg-primary text-center\">Header1</h1>\n      <div className=\"container-fluid d-flex justify-content-center\">\n        <BoardList ListItem={data} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}